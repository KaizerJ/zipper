package com.mycompany.zipper;

import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.util.List;
import java.util.zip.*;
import javax.swing.SwingWorker;


public class ProcessingDialog extends javax.swing.JDialog {

    private List<String> inputFilenames;
    private String outputFilename;
    private final String folderPath;
    
    class FileZipper extends SwingWorker<Void, Void> {

        private final static int BUFFER_SIZE = 4096;
        
        @Override
        protected Void doInBackground() throws Exception {
            // Objeto para referenciar el archivo zip de salida
            try (ZipOutputStream out = new ZipOutputStream(
                    new BufferedOutputStream(
                            new FileOutputStream(outputFilename)))) 
            {
                // Objeto para referenciar a los archivos que queremos comprimir
                BufferedInputStream origin = null;

                // Buffer de transferencia para almacenar datos a comprimir
                byte[] data = new byte[BUFFER_SIZE];
                
                int i = 0;
                int N = inputFilenames.size();
                for (String filename : inputFilenames) {
                    FileInputStream fi = new FileInputStream(folderPath + "\\" + filename);
                    origin = new BufferedInputStream(fi, BUFFER_SIZE);
                    ZipEntry entry = new ZipEntry( filename );
                    out.putNextEntry( entry );
                    // Leemos datos desde el archivo origen y se env√≠an al archivo destino
                    int count;
                    while((count = origin.read(data, 0, BUFFER_SIZE)) != -1)
                    {
                        out.write(data, 0, count);
                    }
                    // Cerramos el archivo origen, ya enviado a comprimir
                    origin.close();
                    progressBar.setValue((int) (++i * 100.0) / N);
                    Thread.sleep(100);
                }
                // Cerramos el archivo zip
                out.close();
            } catch (Exception e){
                e.printStackTrace();
            }
            return null;
        }
        
        @Override
        protected void done(){
            ProcessingDialog.this.dispose();
        }
    }
    
    /**
     * Creates new form ProcessingDialog
     */
    public ProcessingDialog(java.awt.Frame parent, boolean modal, String folderPath,
            List<String> inputFilenames, String outputFilename) {
        super(parent, modal);
        initComponents();
        
        this.folderPath = folderPath;
        this.inputFilenames = inputFilenames;
        // ensures that the output file has .zip extension
        if(outputFilename.endsWith(".zip")){
            this.outputFilename = outputFilename;
        } else {
            this.outputFilename = outputFilename + ".zip";
        }
        
        this.setVisible(true);
        new FileZipper().execute();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        progressBar = new javax.swing.JProgressBar();
        cancelButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        progressBar.setStringPainted(true);

        cancelButton.setText("Cancelar");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(162, 162, 162)
                        .addComponent(cancelButton))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(25, 25, 25)
                        .addComponent(progressBar, javax.swing.GroupLayout.PREFERRED_SIZE, 350, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(25, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(32, 32, 32)
                .addComponent(progressBar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(cancelButton)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton cancelButton;
    private javax.swing.JProgressBar progressBar;
    // End of variables declaration//GEN-END:variables
}
