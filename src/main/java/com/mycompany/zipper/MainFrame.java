package com.mycompany.zipper;

import java.io.File;
import javax.swing.DefaultListModel;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileFilter;
import javax.swing.filechooser.FileNameExtensionFilter;

public class MainFrame extends javax.swing.JFrame {

    private JFileChooser fc;
    private File openFolder;
    
    /**
     * Creates new form MainFrame
     */
    public MainFrame() {
        initComponents();
        initFileChooser();
        initList();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        filesListScrollPane = new javax.swing.JScrollPane();
        filesList = new javax.swing.JList<>();
        compressButton = new javax.swing.JButton();
        filesLabel = new javax.swing.JLabel();
        folderLabel = new javax.swing.JLabel();
        openFolderPathTextField = new javax.swing.JTextField();
        menuBar = new javax.swing.JMenuBar();
        filesMenu = new javax.swing.JMenu();
        openFolderMenuItem = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Zipper");

        filesListScrollPane.setViewportView(filesList);

        compressButton.setText("Comprimir");
        compressButton.setEnabled(false);
        compressButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                compressButtonActionPerformed(evt);
            }
        });

        filesLabel.setText("Ficheros");

        folderLabel.setText("Carpeta seleccionada");

        openFolderPathTextField.setEditable(false);
        openFolderPathTextField.setText("Abre una carpeta en Ficheros > Abrir carpeta");

        filesMenu.setText("Ficheros");

        openFolderMenuItem.setText("Abrir carpeta");
        openFolderMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openFolderMenuItemActionPerformed(evt);
            }
        });
        filesMenu.add(openFolderMenuItem);

        menuBar.add(filesMenu);

        setJMenuBar(menuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(filesListScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 280, Short.MAX_VALUE)
                    .addComponent(compressButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(filesLabel)
                            .addComponent(folderLabel))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(openFolderPathTextField))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(folderLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(openFolderPathTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(filesLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(filesListScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 260, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(compressButton)
                .addGap(16, 16, 16))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void openFolderMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openFolderMenuItemActionPerformed
        fc.setDialogTitle("Eliga una carpeta fuente");
        fc.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        // disable the "All files" option.
        fc.setAcceptAllFileFilterUsed(false);
        
        int result = fc.showOpenDialog(this);
        
        if( result == JFileChooser.APPROVE_OPTION ){
            openFolder = fc.getSelectedFile();
            File[] files = openFolder.listFiles( (file) -> file.isFile());
            
            this.openFolderPathTextField.setText(openFolder.getAbsolutePath());
            
            DefaultListModel<String> listModel = (DefaultListModel) this.filesList.getModel();
            listModel.removeAllElements();
            for (File file : files) {
                listModel.addElement(file.getName());
            }
            
            this.compressButton.setEnabled(true);
        }
    }//GEN-LAST:event_openFolderMenuItemActionPerformed

    private void compressButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_compressButtonActionPerformed
        
        if(filesList.getSelectedIndex() != -1){
            fc.setDialogTitle("Seleccione fichero de destino");
            fc.setFileSelectionMode(JFileChooser.FILES_ONLY);
            // enable the "All files" option.
            fc.setAcceptAllFileFilterUsed(false);
            fc.setFileFilter(new FileNameExtensionFilter("Comprimido ZIP", "zip"));
            
            fc.setSelectedFile(new File(openFolder.getAbsolutePath() + ".zip"));

            int result = fc.showSaveDialog(this);

            if( result == JFileChooser.APPROVE_OPTION ){
                String outputFile = fc.getSelectedFile().getAbsolutePath();

                new ProcessingDialog(this, false, openFolder.getAbsolutePath(), 
                        this.filesList.getSelectedValuesList(), outputFile);
            }
        } else {
            JOptionPane.showMessageDialog(this, 
                                         "Ningún fichero seleccionado", 
                                         "Error de selección de ficheros", 
                                         JOptionPane.ERROR_MESSAGE);
        }
        
    }//GEN-LAST:event_compressButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            javax.swing.UIManager.setLookAndFeel(
                    javax.swing.UIManager.getSystemLookAndFeelClassName());
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton compressButton;
    private javax.swing.JLabel filesLabel;
    private javax.swing.JList<String> filesList;
    private javax.swing.JScrollPane filesListScrollPane;
    private javax.swing.JMenu filesMenu;
    private javax.swing.JLabel folderLabel;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JMenuItem openFolderMenuItem;
    private javax.swing.JTextField openFolderPathTextField;
    // End of variables declaration//GEN-END:variables

    private void initList() {
        DefaultListModel<String> model = new DefaultListModel<String>();
        model.addElement("Abre una carpeta para ver contenido");
        this.filesList.setModel(model);
    }

    private void initFileChooser() {
        this.fc = new JFileChooser();
    }
}
